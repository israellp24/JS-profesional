{"id":"ejercicios/proxy.html","dependencies":[{"name":"C:\\Users\\israe\\Documents\\GitHub\\PLATZI\\JS-profesional\\PlatziMediaPlayer\\package.json","includedInParent":true,"mtime":1650942215331}],"generated":{"html":"<html>\r\n  <head>\r\n    <title>Proxy</title>\r\n  </head>\r\n\r\n  <body>\r\n    <a href=\"/ejercicios/\">Go back</a>\r\n    <p><em>Abre la consola</em></p>\r\n\r\n    <script src=\"https://unpkg.com/fast-levenshtein@2.0.6/levenshtein.js\"></script>\r\n    <script>// Proxy es parecido a getters y setters\n// Usa un concepto que se llama traps: son interceptores de llamadas. A diferencia de getters, no opera sobre una propieda, si no sobre un objeto.\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy#Methods_of_the_handler_object\n// Creemos un ejemplo donde interceptamos llamadas para leer una propiedad\n// Si la propiedad existe, la regresamos\n// Si no existe, entonces sugerimos una que pueda funcionar\n// Para eso eso vamos a usar un algoritmo que se llama Levenshtein. (window.Levenshtein.get)\n// Ejemplos de levenshtein distance (usa window.Levenshtein)\nconst target = {\n  red: 'Rojo',\n  green: 'Verde',\n  blue: 'Azul'\n};\nconst arrTarget = Object.keys(target);\nconst handler = {\n  get(target, property) {\n    if (property in target) {\n      return target[property];\n    }\n\n    const suggestion = Object.keys(target).find(key => Levenshtein.get(key, property) <= 3);\n\n    if (suggestion) {\n      let sugerencias = '';\n      console.log(`${property} no se encontro. Quisiste decir ${arrTarget.join(', ')}?`);\n    }\n\n    return target[property];\n  }\n\n};\nconst p = new Proxy(target, handler);</script>\r\n  </body>\r\n</html>"},"sourceMaps":null,"error":null,"hash":"a2bb561c7c7f3d6683af119d43f656fc","cacheData":{"env":{}}}