{"id":"ejercicios/promises.html","dependencies":[{"name":"C:\\Users\\israe\\Documents\\GitHub\\PLATZI\\JS-profesional\\PlatziMediaPlayer\\package.json","includedInParent":true,"mtime":1650942215331}],"generated":{"html":"<html>\r\n\r\n<head>\r\n\t<title>Promesas</title>\r\n</head>\r\n\r\n<body>\r\n\t<a href=\"/ejercicios/\">Go back</a>\r\n\r\n\t<ul>\r\n\t\t<li><button id=\"sequence\">Get Top Movies in Sequence</button></li>\r\n\t\t<li><button id=\"parallel\">Get Top Movies in Parallel</button></li>\r\n\t\t<li><button id=\"fastest\">Get Fastest Top Movie</button></li>\r\n\t</ul>\r\n\r\n\t<ul id=\"movies\"></ul>\r\n\r\n\t<script>// Ejemplo: renderMovies([{ title: \"Spider-Man\", release_date: \"2019-06-30\", poster_path: \"/rjbNpRMoVvqHmhmksbokcyCr7wn.jpg\" }])\n// Traducir las funciones de usar thens a usar async/await\n// Crear funci贸n para que no nos gastemos la cantidad de requests demasiado rapido\n// Crear funci贸n donde hacemos requests secuenciales\n// Crear funci贸n donde hacemos requests en paralelo\n// Crear funci贸n donde obtenemos el primer request que llegue\n// The Movie Database API: https://developers.themoviedb.org/3/getting-started/introduction\nconst apiKey = 'b89fc45c2067cbd33560270639722eae';\n\nasync function getMovie(id) {\n  const url = `https://api.themoviedb.org/3/movie/${id}?api_key=${apiKey}`;\n  const response = await fetch(url);\n  const data = await response.json();\n  return data;\n}\n\nasync function getPopularMovies() {\n  const url = `https://api.themoviedb.org/3/discover/movie?sort_by=popularity.desc&api_key=${apiKey}`;\n  const response = await fetch(url);\n  const data = await response.json();\n  return data.results;\n}\n\nasync function getTopMoviesIds(n = 3) {\n  /*\r\n  return getPopularMovies().then(popularMovies =>\r\n  \t popularMovies.slice(0, n).map(movie => movie.id)\r\n  );\r\n  */\n\n  /*\r\n  try {\r\n  \tconst popularMovies = await getPopularMovies()\r\n  } catch (error) {\r\n  \tconsole.log(error.message)\r\n  }\r\n  */\n  const popularMovies = await getPopularMovies();\n  const ids = popularMovies.slice(0, n).map(movie => movie.id);\n  return ids;\n}\n\nfunction renderMovies(movies) {\n  const movieList = document.getElementById('movies');\n  movieList.innerHTML = '';\n  movies.forEach(movie => {\n    const listItem = document.createElement('li');\n    listItem.innerHTML = `\n\t\t\t\t<img src=\"https://image.tmdb.org/t/p/w342${movie.poster_path}\" />\n\t\t\t\t<h5>${movie.title}</h5>\n\t\t\t\t<p>Released on <em>${movie.release_date}</em></p>\n\t\t\t\t`;\n    movieList.appendChild(listItem);\n  });\n}\n\nasync function getTopMoviesInSequence() {\n  const ids = await getTopMoviesIds();\n  const movies = [];\n\n  for (const id of ids) {\n    const movie = await getMovie(id);\n    movies.push(movie);\n  }\n\n  return movies;\n}\n\nasync function getTopMoviesInParallel() {\n  const ids = await getTopMoviesIds();\n  const moviePromise = ids.map(id => getMovie(id));\n  const movies = await Promise.all(moviePromise);\n  return movies;\n}\n\nasync function getFastestTopMovie() {\n  const ids = await getTopMoviesIds();\n  const moviePromise = ids.map(id => getMovie(id));\n  const movie = await Promise.race(moviePromise);\n  return movie;\n}\n\ndocument.getElementById('sequence').onclick = async function () {\n  const movies = await getTopMoviesInSequence();\n  renderMovies(movies);\n};\n\ndocument.getElementById('parallel').onclick = async function () {\n  const movies = await getTopMoviesInParallel();\n  renderMovies(movies);\n};\n\ndocument.getElementById('fastest').onclick = async function () {\n  const movie = await getFastestTopMovie();\n  renderMovies([movie]);\n};</script>\r\n</body>\r\n\r\n</html>"},"sourceMaps":null,"error":null,"hash":"9c6971332656948ff2c3630a8546861c","cacheData":{"env":{}}}