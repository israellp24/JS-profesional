{"id":"ejercicios/prototype.html","dependencies":[{"name":"C:\\Users\\israe\\Documents\\GitHub\\PLATZI\\JS-profesional\\PlatziMediaPlayer\\package.json","includedInParent":true,"mtime":1650942215331}],"generated":{"html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n    <head>\r\n        <meta charset=\"UTF-8\">\r\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\r\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n        <title>Prototype</title>\r\n    </head>\r\n    <body>\r\n        <a href=\"/ejercicios/\">Go back</a>\r\n        <p><em>Abre la consola</em></p>\r\n\r\n        <script>//Un objeto comun y corriente\n\n/*\r\nconst zelda = {\r\n    name: 'Zelda',\r\n}\r\n  zelda.saludar = function() {\r\n    console.log(`Hola Soy ${this.name}`);\r\n}\r\n  zelda.saludar();\r\n  const link = {\r\n    name: 'Link',\r\n}\r\n  link.saludar = function() {\r\n    console.log(`Hola Soy ${this.name}`);\r\n}\r\n  link.saludar();\r\n*/\n//Seamos un poco mas eficientes\n\n/*\r\nfunction Hero(name){\r\n    const hero = {\r\n        name:name\r\n    }\r\n    hero.saludar = function(){\r\n        console.log(`Hola soy ${this.name}`);\r\n    }\r\n    return hero;\r\n}\r\n  const zelda = Hero(\"Zelda\");\r\nzelda.saludar();\r\n  const link = Hero(\"Link\");\r\nlink.saludar();\r\n*/\n//Aun podemos mejorar mas y evitar tener que crear la misma funcion cada ves\n\n/*\r\nconst heroMethods = {\r\n    saludar: function(){\r\n        console.log(`Me llamo ${this.name}`);\r\n    },\r\n}\r\n  function Hero(name){\r\n    const hero = {\r\n        name:name\r\n    }\r\n    hero.saludar = heroMethods.saludar;\r\n    return hero;\r\n}\r\n  const zelda = Hero(\"Zelda\");\r\nzelda.saludar();\r\n  const link = Hero(\"Link\");\r\nlink.saludar();\r\n*/\n//Object.create\n//const nuevoObjeto = Object.create(objeto)\n\n/*\r\nconst heroMethods = {\r\n    saludar: function(){\r\n        console.log(`Soy el superheore ${this.name}`);\r\n    },\r\n}\r\n  function Hero(name){\r\n    const hero = Object.create(heroMethods);\r\n    hero.name = name;\r\n    return hero;\r\n}\r\n  const zelda = Hero(\"Zelda\");\r\nzelda.saludar();\r\n  const link = Hero(\"Link\");\r\nlink.saludar();\r\n*/\n//Los metodos de hero dentro de Hero\n\n/*\r\nfunction Hero(name){\r\n    const hero = Object.create(Hero.prototype);\r\n    hero.name = name;\r\n    return hero;\r\n}\r\n  Hero.prototype.saludar = function(){\r\n    console.log(`Soy superheorina! ${this.name}`);\r\n}\r\n  const zelda = Hero(\"Zelda\");\r\nzelda.saludar();\r\n  const link = Hero(\"Link\");\r\nlink.saludar();\r\n*/\n//New es un atajo(azucar sintactica) para llevar Hero.prototype al objeto\nfunction Hero(name) {\n  //this = Object.create(Hero.prototype);\n  this.name = name;\n}\n\nHero.prototype.saludar = function () {\n  console.log(`New: ${this.name}`);\n};\n\nconst zelda = new Hero(\"Zelda\");\nzelda.saludar();\nconst link = new Hero(\"Link\");\nlink.saludar();</script>\r\n    </body>\r\n</html>"},"sourceMaps":null,"error":null,"hash":"05c235d1b5c2b1b0ea3a4f5394dca56a","cacheData":{"env":{}}}